/* Copyright (c) 2012 Nordic Semiconductor. All Rights Reserved.
 *
 * The information contained herein is property of Nordic Semiconductor ASA.
 * Terms and conditions of usage are described in detail in NORDIC
 * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
 *
 * Licensees are granted free, non-transferable use of the information. NO
 * WARRANTY of ANY KIND is provided. This heading must NOT be removed from
 * the file.
 *
 * $LastChangedRevision$
 */

/** @file 
 *
 * @defgroup modules_pwr_mgmt
 * @{
 * @ingroup nrfready_modules
 * @brief Power management module.
 *
 * @details This module deals with power and clock management.
 * 
 *          Tasks related to power management: 
 *            - Decide when to go to System OFF, and when to stay in System ON
 *          Tasks related to clock management: 
 *            - Decide which 16 MHz clock to use
 *            - Decide if and when to calibrate 32 kHz RC oscillator
 * 
 *          The figure below depicts how this module operates:
 * @image html flow_m_pwr_mgmt.png Power management module flow  
 */
#ifndef __M_PWR_MGMT_H__
#define __M_PWR_MGMT_H__

#include <stdbool.h>
#include <stdint.h>

#include "app_scheduler.h"

#define PWR_MGMT_MAX_SYSOFF_CB_NUM 7
#define PWR_MGMT_MAX_IDLE_CB_NUM   1
#define PWR_MGMT_POLLRATE   1000 // [ms]

/**@brief Event data generated by this module.  */
typedef struct
{
    bool    idle_timeout;
    bool    sysoff_timeout;
} m_pwr_and_clk_mgmt_event_t; 

/**@brief Sysoff callback list */
typedef struct
{
    uint8_t num;
    bool (*callbacks[PWR_MGMT_MAX_SYSOFF_CB_NUM])(bool p_wakeup);
} pwr_mgmt_sysoff_callbacks_t;

/**@brief Callback list */
typedef struct
{
    uint8_t num;
    void (*callbacks[PWR_MGMT_MAX_IDLE_CB_NUM])(void);
} pwr_mgmt_idle_callbacks_t;

/**@brief Initialization parameters */
typedef struct
{
    pwr_mgmt_sysoff_callbacks_t sysoff; /** List of callbacks which should be called prior to System OFF */
    pwr_mgmt_idle_callbacks_t   idle;   /** List of callbacks which should be called when idle */
    uint32_t                    sysoff_timeout;   /** Period of inactivity which is allowed before System OFF is entered [@ref PWR_MGMT_POLLRATE units] */
    uint32_t                    idle_timeout;     /** Period of inactivity before idle callbacks are executed [@ref PWR_MGMT_POLLRATE units] */
    uint32_t                    lfclk_cal_interval; /** LFCLK calibration timer interval in multiples of 0.25 seconds  [@ref NRF_CLOCK->CTIV]*/
} m_prw_and_clk_mgmt_init_t;

/**@brief Power management and clock initialization.
 *
 * @param[in] p_params Configurable parameters
 * @return 
 * @retval NRF_SUCCESS
 */
uint32_t m_pwr_and_clk_mgmt_init(const m_prw_and_clk_mgmt_init_t* p_params, app_sched_event_handler_t event_handler);

/**@brief Update inactivity timeout threshold.
 * 
 * @note Counter will be reset
 * 
 * @param[in] p_inactivity_timeout Period of inactivity which is allowed before System OFF is entered [@ref PWR_MGMT_POLLRATE units] 
 */
void m_prw_mgmt_set_sysoff_timeout(uint32_t p_sysoff_timeout);

/**@brief Update idle timeout threshold.
 * 
 * @note Counter will be reset
 * 
 * @param[in] p_inactivity_timeout Period of inactivity which is allowed before idle callbacks are executed
 */
void m_prw_mgmt_set_idle_timeout(uint32_t p_idle_timeout);

/**@brief Power management run function. Should run in the main loop.
 */
void m_pwr_mgmt_run(void);

/**@brief Notify registered callbacks of inactivity
 *
 * @details When @ref m_pwr_mgmt_feed has not been called for 
 */
void m_pwr_mgmt_goto_idle(void * p_event_data, uint16_t event_size);

/**@brief Go to System OFF.
 *
 * @details All callbacks will be executed prior to shutdown. Wakeup from System OFF will start the system from reset.
 */
void m_pwr_mgmt_goto_sysoff(void * p_event_data, uint16_t event_size);

/**@brief Go to System OFF and stay there. Useful when i.e. battery level is dangerously low.
 *
 * @details All callbacks will be executed prior to shutdown. Wakeup from System OFF will start the system from reset.
 */
void m_pwr_mgmt_stay_in_sysoff(void * p_event_data, uint16_t event_size);

/**@brief Activity notification function.
 *
 * @details Call this function when doing something that constitutes "activity".
 *          E.g. whenever sending data, call this function to indicate that the application
 *          is active and should not disconnect any ongoing communication links.
 */
void m_pwr_mgmt_feed(void);

#endif /* __M_PWR_MGMT_H__ */

/** @} */
