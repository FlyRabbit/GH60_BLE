/* Copyright (c) 2012 Nordic Semiconductor. All Rights Reserved.
 *
 * The information contained herein is property of Nordic Semiconductor ASA.
 * Terms and conditions of usage are described in detail in NORDIC
 * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
 *
 * Licensees are granted free, non-transferable use of the information. NO
 * WARRANTY of ANY KIND is provided. This heading must NOT be removed from
 * the file.
 *
 * $LastChangedRevision$
 */

/** @file 
 *
 * @defgroup modules_coms_ble_hid
 * @{
 * @ingroup nrfready_modules
 * @brief BLE HID (HID over GATT) sub-module.
 *
 * @details This sub-module implements the HID over GATT Service. It provides an API for setting up descriptors and reports.
 *          As it does not include a HID parser, @ref m_coms_ble_hid_report_id_map must be used to set up the correct reports for a given descriptor
 *          (the programmer is in effect the HID parser).
 *          The descriptors and associated report configuration is stored in flash. The HoG Service is created once @ref m_coms_ble_hid_enable is called.
 *          At this point the SoftDevice must be enabled.
 *
 *          Like other BLE Services, this module must be informed when relevant BLE events occurs. 
 *          This module will generate HID-related events (boot mode enabled, output reports written etc.)
 * @{
 */
#ifndef __M_COMS_BLE_HID__
#define __M_COMS_BLE_HID__

#include <stdbool.h>
#include <stdint.h>

#include "m_coms_ble.h"
#include "ble_hids.h"

/**@brief Event type generated by this module */
typedef struct
{
    ble_hids_evt_t * hids_evt; /** Relevant BLE event */
    uint8_t          interface_idx; /** Interface related to the event */
    uint8_t          report_type;      /** Report type. Input, output or feature */
    uint8_t          report_idx;    /** Report related to the event */
    uint8_t          len;           /** Length of received data */
    uint8_t *        data;          /** Received data */
} m_coms_ble_hid_evt_t;


typedef void (*m_coms_hid_evt_handler_t) (m_coms_ble_hid_evt_t * p_evt);

typedef struct
{
    m_coms_hid_evt_handler_t evt_handler;
    ble_srv_error_handler_t  error_handler;
    uint32_t *               db_loc;
    uint32_t                 db_size;
    uint16_t                 base_hid_version;
    uint8_t                  b_country_code;
    uint8_t                  flags;
    uint8_t                  io_capabilities;
} m_coms_ble_hid_init_t;

/**@brief HID sub-module initialization
 *
 * @params[in] p_evt_handler Event handler callback
 * @params[in] p_db_loc      HID flash database location
 * @params[in] p_db_len      Size of flash database (in bytes)
 */
uint32_t m_coms_ble_hid_init(const m_coms_ble_hid_init_t * p_params);

/**@brief Add new BLE HID (HID over GATT) descriptor
 * e
 * @note USB Dongle interface is not affected
 *
 * @param[in]  p_descriptor         Pointer to USB HID report descriptor.
 * @param[in]  p_descriptor_len     Length of descriptor.
 * @param[in]  p_boot_type_bitmask  Boot type avilable (keyboard or mouse boot device). See @ref m_coms_ble_hid_boot_type_t for valid types.
 * @param[out] p_interface_idx      Reference to the generated HID interface. Used in all subsequent HID operations.
 * @return
 * @retval NRF_SUCCESS
 * @retval NRF_ERROR_INVALID_PARAM
 */
uint32_t m_coms_ble_hid_report_descriptor_add(const uint8_t * p_descriptor, 
                                              uint16_t        p_descriptor_len, 
                                              uint8_t         p_boot_type_bitmask, 
                                              uint8_t *       p_interface_idx);

/**@brief Map each USB HID report (speficied in report descriptor) to a BLE HID (HID over GATT) characteristic.
 *
 * @details When a HID report descriptor is added (@ref m_coms_hid_report_descriptor_add), 
 *          this functon needs to be called once for each report specified in the HID report descriptor.
 * 
 * @note Gazell USB Dongle interface is not configured by this.
 *
 * @param[in]  p_interface_id Reference to HID interface (@ref m_coms_hid_report_descriptor_add)
 * @param[in]  p_report_type  HID report type
 * @param[in]  p_read_resp    If true, application will get an event and be required to respond when this Report is read
 * @param[in]  p_report_id    HID report id
 * @param[in]  p_report_len   HID report length
 * @param[out] p_report_idx   Use when sending (see @ref m_coms_ble_hid_input_report_send). Used to identify the particular report characteristic.
 * @return
 * @retval NRF_SUCCESS
 * @retval NRF_ERROR_INVALID_PARAM
 */
uint32_t m_coms_ble_hid_report_id_map(uint8_t                  p_interface_idx, 
                                      m_coms_hid_report_type_t p_report_type, 
                                      bool                     p_read_resp,
                                      uint8_t                  p_report_id, 
                                      uint8_t                  p_report_len,
                                      uint8_t *                p_report_idx);

/**@brief Maps an external BLE service characteristic to a HID report id.
 *
 * @details In the case that the HID Report Descriptor has for example a battery level report, the HID service can be mapped to the battery service.
 * 
 * @note USB Dongle interface is not configured by this.
 *
 * @param[in] p_interface_idx         Reference to HID interface (@ref m_coms_hid_report_descriptor_add)
 * @param[in] p_external_char_uuid    UUID of the external BLE characteristic which will refer to this HID report
 * @return
 * @retval NRF_SUCCESS
 * @retval NRF_ERROR_INVALID_PARAM
 */
uint32_t m_coms_ble_hid_report_id_map_external(uint8_t  p_interface_idx, 
                                               uint16_t p_external_char_uuid);
                                     
/**@brief Initialize HID Service(s) and add them to ATT database
 *
 * @note Only the HID reports and descripts added until now will be part of the HID Service(s)
 *
 * @return NRF_SUCCESS
 * @return NRF_ERROR_INVALID_STATE
 */
uint32_t m_coms_ble_hid_enable(void);

/**@brief Function that should be called whenever an event is received from the SoftDevice 
 * @details Relevent events are: BLE_GAP_EVT_CONNECTED
 *                               BLE_GAP_EVT_DISCONNECTED
 *                               BLE_GATTS_EVT_WRITE
 * 
 * @param[in] p_ble_evt Bluetooth event
 */
void m_coms_ble_hid_on_evt(ble_evt_t * p_ble_evt);

/**@brief Send an input report 
 *
 * @param[in] p_interface_id Which interface to use
 * @param[in] p_report_id    Which report ID to use
 * @param[in] p_data         The data to send
 * @param[in] p_len          Length of data
 * @return
 * @retval NRF_SUCCESS
 * @retval NRF_ERROR_INVALID_PARAM
 */
uint32_t m_coms_ble_hid_input_report_send(uint8_t   p_interface_idx, 
                                          uint8_t   p_report_idx, 
                                          uint8_t * p_data, 
                                          uint8_t   p_len);

/**@brief Send a HID keyboard boot report
 *
 * @note One of the HID Services must have been configured to have a keyboard boot report
 *
 * @param[in] p_data Boot report data
 * @param[in] p_len  Length of data
 * @return
 * @retval NRF_SUCCESS
 * @retval NRF_ERROR_DATA_SIZE
 * @retval NRF_ERROR_INVALID_STATE
 */
uint32_t m_coms_ble_hid_keyboard_boot_report_send(const m_coms_hid_boot_pkt_t * p_pkt);

/**@brief Send a HID mouse boot report
 *
 * @note One of the HID Services must have been configured to have a mouse boot report
 *
 * @param[in] p_data Boot report data
 * @param[in] p_len  Length of data
 * @return
 * @retval NRF_SUCCESS
 * @retval NRF_ERROR_DATA_SIZE
 * @retval NRF_ERROR_INVALID_STATE
 */
uint32_t m_coms_ble_hid_mouse_boot_report_send(const m_coms_hid_boot_pkt_t * p_pkt);

/**@brief Get number of CCCDs in HID database
 *
 * @return CCCD count
 */
uint32_t m_coms_ble_hid_num_cccds_get(void);

/**@brief Set content of a feature report.
 *
 * @param[in] p_interface_id Which interface to use
 * @param[in] p_report_id    Which report ID to use
 * @param[in] p_data         The report data
 * @param[in] p_len          Length of data
 * @return
 * @retval NRF_SUCCESS
 * @retval NRF_ERROR_INVALID_PARAM
 */
uint32_t m_coms_ble_hid_feature_report_set(uint8_t   p_interface_idx, 
                                          uint8_t   p_report_idx, 
                                          uint8_t * p_data, 
                                          uint16_t   p_len);
#endif /* __M_COMS_BLE_HID__*/

/** @} */
