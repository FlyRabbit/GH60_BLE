/* Copyright (c) 2012 Nordic Semiconductor. All Rights Reserved.
 *
 * The information contained herein is property of Nordic Semiconductor ASA.
 * Terms and conditions of usage are described in detail in NORDIC
 * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
 *
 * Licensees are granted free, non-transferable use of the information. NO
 * WARRANTY of ANY KIND is provided. This heading must NOT be removed from
 * the file.
 *
 * $LastChangedRevision$
 */

/** @file 
 *
 * @defgroup modules_keyboard
 * @{
 * @ingroup nrfready_modules
 * @brief Keyboard module.
 *
 * @details This module deals with the keyboard matrix.
 *          The figure below depicts how this module operates:
 * @image html flow_m_keyboard.png Keyboard module flow  
 */
#ifndef __M_KEYBOARD_H__
#define __M_KEYBOARD_H__

#define M_KEYBOARD_DEFAULT_POLLRATE 15 // [ms]

#include <stdbool.h>
#include <stdint.h>

#include "app_scheduler.h"
 
#define M_KEYBOARD_MAX_NUM_KEYS 6 
 
/**@brief Data type generated by this module.  */
typedef struct
{
    uint8_t modifier_keys;
    uint8_t keys[M_KEYBOARD_MAX_NUM_KEYS];
    uint8_t num_keys;
    bool    pairing_button;
} m_keyboard_data_t; 
 
/**@brief Data format */
typedef enum
{
    keyboard_format_ascii,
    keyboard_format_usbhid
} m_keyboard_format_t;
 
/**@brief Keyboard matrix initialization.
 * 
 * @param[in] p_format Format of received keyboard data. 
 * @param[in] event_handler Event callback to be used when polling is enabled.
 * @return
 * @retval NRF_SUCCESS
 */
uint32_t m_keyboard_init(m_keyboard_format_t p_format, app_sched_event_handler_t event_handler);
 
/**@brief Keyboard format.
 * 
 * @param[in] event_handler Event callback to be used when polling is enabled.
 * @return
 * @retval NRF_SUCCESS
 */
uint32_t m_keyboard_format_set(m_keyboard_format_t p_format);
 
/**@brief Enable periodic polling of keyboard matrix. Data is dispatched using event handler.
 *
 * @param[in] pollrate_ms How often the keyboard matrix is polled. NOTE: should be >5.
 * @return
 * @retval NRF_SUCCESS
 * @retval NRF_ERROR_INVALID_PARAM
 */
uint32_t m_keyboard_polling_enable(uint32_t pollrate_ms);
 
/**@brief Disable periodic polling of keyboard matrix.
 */
void m_keyboard_polling_disable(void);
 
/**@brief Reads keyboard matrix and creates a new packet if keys have changed.
 *        Note: not needed when polling is enabled.
 * 
 * @param[out] p_key_packet      Pointer to a pointer to a keyboard packet
 * @param[out] p_key_packet_size Keyboard packet size
 * @return true if a new packet is created 
 */
bool m_keyboard_new_packet(m_keyboard_data_t ** p_key_packet);

/**@brief See if pairing button is currently pressed.
 *
 * @return true if it is pressed down
 */
bool m_keyboard_pairing_btn_pressed(void);
 
/**@brief Prepares keyboard matrix to generate wakeup.
 */
bool m_keyboard_wakeup_prepare(bool wakeup);

/**@brief Check if keyboard packet is empty.
 *
 * @return true if packet is empty
 */
bool m_keyboard_packet_is_empty(m_keyboard_data_t* packet);

/**@brief Enable keyboard matrix. 
 *
 * @return
 * @retval NRF_SUCCESS
 * @retval NRF_ERROR_INVALID_STATE
 */
uint32_t m_keyboard_matrix_enable(void);

/**@brief Disable keyboard matrix. 
 *
 * @return
 * @retval NRF_SUCCESS
 */
uint32_t m_keyboard_matrix_disable(void);
#endif /* __M_KEYBOARD_H__ */

/** @} */
